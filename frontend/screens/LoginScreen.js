import React, { useState, useEffect } from 'react'; // Nh·∫≠p React v√† useState ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i form
import { View, Text, TextInput, Button, StyleSheet, TouchableOpacity, Platform, Alert } from 'react-native'; // Nh·∫≠p c√°c th√†nh ph·∫ßn giao di·ªán
import { useRouter } from 'expo-router'; // Nh·∫≠p useRouter ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
import { Colors } from '../app-example/constants/Colors'; // Nh·∫≠p Colors ƒë·ªÉ s·ª≠ d·ª•ng m√†u s·∫Øc
import { AuthService } from '../services/api'; // Nh·∫≠p AuthService t·ª´ API service
import AsyncStorage from '@react-native-async-storage/async-storage'; // Nh·∫≠p AsyncStorage ƒë·ªÉ l∆∞u tr·ªØ dark mode

export default function LoginScreen() {
  const [email, setEmail] = useState(''); // Tr·∫°ng th√°i cho email ng∆∞·ªùi d√πng nh·∫≠p
  const [password, setPassword] = useState(''); // Tr·∫°ng th√°i cho m·∫≠t kh·∫©u
  const [loading, setLoading] = useState(false); // Tr·∫°ng th√°i loading khi ƒëƒÉng nh·∫≠p
  const [isDarkMode, setIsDarkMode] = useState(false); // State qu·∫£n l√Ω dark mode
  const router = useRouter(); // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng

  // Load dark mode state t·ª´ AsyncStorage
  useEffect(() => {
    const loadDarkMode = async () => {
      try {
        const savedDarkMode = await AsyncStorage.getItem('isDarkMode');
        if (savedDarkMode !== null) {
          setIsDarkMode(JSON.parse(savedDarkMode));
        }
      } catch (error) {
        console.log('Error loading dark mode:', error);
      }
    };
    loadDarkMode();
  }, []);

  // Toggle dark mode v√† save state
  const toggleDarkMode = async () => {
    try {
      const newValue = !isDarkMode;
      setIsDarkMode(newValue);
      await AsyncStorage.setItem('isDarkMode', JSON.stringify(newValue));
    } catch (error) {
      console.log('Error saving dark mode:', error);
    }
  };

  const handleSignIn = async () => { // H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p b·∫±ng email/m·∫≠t kh·∫©u
    if (!email || !password) {
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin');
      return;
    }

    try {
      setLoading(true);
      console.log('Attempting login with:', { email, password: '***' });
      console.log('AuthService object:', AuthService);
      
      const response = await AuthService.login(email, password); // G·ªçi API ƒëƒÉng nh·∫≠p th·∫≠t
      console.log('Login response:', response);
      
      if (response && response.user) { // N·∫øu th√†nh c√¥ng
        console.log('Login successful, user type:', response.user.loai_tai_khoan);
        // Ki·ªÉm tra lo·∫°i t√†i kho·∫£n v√† ƒëi·ªÅu h∆∞·ªõng ph√π h·ª£p
        if (response.user.loai_tai_khoan === 'business') {
          router.replace('/MainScreen'); // Chuy·ªÉn ƒë·∫øn MainScreen cho business
        } else {
          router.replace('/app-example/app/(tabs)/'); // Chuy·ªÉn ƒë·∫øn tabs cho personal
        }
      }
    } catch (error) {
      console.error('Login error details:', error);
      console.error('Error message:', error.message);
      console.error('Error stack:', error.stack);
      
      // N·∫øu user ch∆∞a t·ªìn t·∫°i, g·ª£i √Ω ƒëƒÉng k√Ω
      if (error.message === 'Invalid email or password') {
        Alert.alert('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i', 
          'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.\n\nB·∫°n c√≥ mu·ªën ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi kh√¥ng?',
          [
            { text: 'H·ªßy', style: 'cancel' },
            { text: 'ƒêƒÉng k√Ω', onPress: () => router.push('/AccountTypeSelection') }
          ]
        );
      } else {
        Alert.alert('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i', 
          `L·ªói: ${error.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server'}\n\nVui l√≤ng ki·ªÉm tra:\n- Backend server ƒë√£ ch·∫°y?\n- Port 5000 c√≥ tr·ªëng?`
        ); 
      }
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => { // H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p b·∫±ng Google
    if (Platform.OS === 'ios') { // Ki·ªÉm tra n·∫øu ch·∫°y tr√™n iOS
      console.log('ƒêang ch·∫°y tr√™n iOS Simulator - B·ªè qua Google Sign-In'); // B·ªè qua Google sign-in tr√™n simulator
      return;
    }
    Alert.alert('Th√¥ng b√°o', 'T√≠nh nƒÉng Google Sign-In s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong t∆∞∆°ng lai');
  };

  const handleSignup = () => { // H√†m chuy·ªÉn h∆∞·ªõng sang m√†n h√¨nh ch·ªçn lo·∫°i t√†i kho·∫£n
    router.push('/AccountTypeSelection'); // Chuy·ªÉn t·ª´ ƒêƒÉng_nh·∫≠p sang Ch·ªçn_loai_tai_khoan
  };

  return (
    <View style={[styles.container, { backgroundColor: isDarkMode ? Colors.darkBackground : Colors.white }]}>
      <View style={styles.header}>
        <Text style={[styles.title, { color: isDarkMode ? Colors.darkText : Colors.black }]}>Ch√†o m·ª´ng tr·ªü l·∫°i</Text>
        <TouchableOpacity 
          style={[styles.darkModeButton, { backgroundColor: isDarkMode ? Colors.darkGreen : Colors.lightGreen }]}
          onPress={toggleDarkMode}
        >
          <Text style={styles.darkModeIcon}>{isDarkMode ? 'üåô' : '‚òÄÔ∏è'}</Text>
        </TouchableOpacity>
      </View>
      <View style={styles.formContainer}>
        <TextInput
          style={[styles.input, { 
            backgroundColor: isDarkMode ? Colors.darkSurface : Colors.white,
            borderColor: isDarkMode ? Colors.darkSecondary : '#ddd',
            color: isDarkMode ? Colors.darkText : Colors.black
          }]}
          placeholder="email@example.com"
          placeholderTextColor={isDarkMode ? Colors.darkSecondary : Colors.gray}
          value={email}
          onChangeText={setEmail}
        />
        <TextInput
          style={[styles.input, { 
            backgroundColor: isDarkMode ? Colors.darkSurface : Colors.white,
            borderColor: isDarkMode ? Colors.darkSecondary : '#ddd',
            color: isDarkMode ? Colors.darkText : Colors.black
          }]}
          placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
          placeholderTextColor={isDarkMode ? Colors.darkSecondary : Colors.gray}
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />
        <Button 
          title={loading ? "ƒêang ƒëƒÉng nh·∫≠p..." : "ƒêƒÉng Nh·∫≠p"} 
          onPress={handleSignIn} 
          disabled={loading}
          color={Colors.primary} 
        />
        {/* <Button title="ƒêƒÉng nh·∫≠p v·ªõi Google" onPress={handleGoogleSignIn} color={Colors.white} /> */}
      </View>
      <TouchableOpacity onPress={handleSignup} style={styles.linkContainer}>
        <Text style={[styles.link, { color: isDarkMode ? Colors.darkGreen : Colors.primary }]}>Ng∆∞·ªùi d√πng m·ªõi? T·∫°o t√†i kho·∫£n</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', padding: 16 },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 30,
  },
  formContainer: { marginVertical: 10 },
  title: { fontSize: 28, fontWeight: 'bold', textAlign: 'center', flex: 1 },
  input: { borderWidth: 1, padding: 10, marginVertical: 10, borderRadius: 14 },
  linkContainer: { marginTop: 20, alignItems: 'center' },
  link: { fontSize: 16 },
  darkModeButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  darkModeIcon: {
    fontSize: 20,
  }
});